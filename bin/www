#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('apinode30:server');
var http = require('http');
var io = require('socket.io');

const appInsights = require("applicationinsights");
appInsights.setup("20d4f571-48d1-4e4e-afbe-653697f29e84");
appInsights.start();

var Socket = require('../socket/socket');
const config = require('../config/config');
var InternalHttpClient = require('../clients/internal');

const dotenv = require('dotenv');
dotenv.config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var ws = io(server);
// ws.engine.generateId = function (req) {
//   return 1;
// }
// this creates a new socket for each new device connected. This should also have the proper ID
ws.on('connection', function (socket) { new Socket(socket) });

var httpClient = new InternalHttpClient(global.gConfig.mainServerUrl || process.env.MAIN_SERVER_URL);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
